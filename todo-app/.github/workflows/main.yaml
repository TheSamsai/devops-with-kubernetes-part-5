name: Release application

on:
  push:

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: dwk-cluster
  GKE_ZONE: europe-north1-a
  BACKEND_IMAGE: todo-app
  DAILY_IMAGE: daily-todo
  BROADCASTER_IMAGE: broadcaster
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GKE_PROJECT }}
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          export_default_credentials: true

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker
      # Get the GKE credentials so we can deploy to the cluster
      - run: |-
          gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"
      # Build the Docker image
      - name: Build backend
        run: |-
          docker build \
            --tag "gcr.io/$PROJECT_ID/$BACKEND_IMAGE:${GITHUB_REF#refs/heads/}-$GITHUB_SHA" \
            -f Containerfile \
            .
      - name: Build daily
        run: |-
          docker build \
            --tag "gcr.io/$PROJECT_ID/$DAILY_IMAGE:${GITHUB_REF#refs/heads/}-$GITHUB_SHA" \
            -f daily-todo/Containerfile \
            daily-todo/.
      - name: Build broadcaster
        run: |-
          docker build \
            --tag "gcr.io/$PROJECT_ID/$BROADCASTER_IMAGE:${GITHUB_REF#refs/heads/}-$GITHUB_SHA" \
            -f broadcaster/Containerfile \
            broadcaster/.
      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          docker push "gcr.io/$PROJECT_ID/$BACKEND_IMAGE:${GITHUB_REF#refs/heads/}-$GITHUB_SHA"
          docker push "gcr.io/$PROJECT_ID/$DAILY_IMAGE:${GITHUB_REF#refs/heads/}-$GITHUB_SHA"
          docker push "gcr.io/$PROJECT_ID/$BROADCASTER_IMAGE:${GITHUB_REF#refs/heads/}-$GITHUB_SHA"
      # Set up kustomize
      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v1

      - name: Populate .env.secrets
        run: |-
          echo "$POSTGRES_PASSWORD" > .env.secret
      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |-
          kubectl create namespace ${GITHUB_REF#refs/heads/} || true
          kubectl config set-context --current --namespace=${GITHUB_REF#refs/heads/}
          kustomize edit set namespace ${GITHUB_REF#refs/heads/}
          kustomize edit set image gcr.io/PROJECT/BACKEND=gcr.io/$PROJECT_ID/$BACKEND_IMAGE:${GITHUB_REF#refs/heads/}-$GITHUB_SHA
          kustomize edit set image gcr.io/PROJECT/DAILY=gcr.io/$PROJECT_ID/$DAILY_IMAGE:${GITHUB_REF#refs/heads/}-$GITHUB_SHA
          kustomize edit set image gcr.io/PROJECT/BROADCASTER=gcr.io/$PROJECT_ID/$BROADCASTER_IMAGE:${GITHUB_REF#refs/heads/}-$GITHUB_SHA
          kustomize build . | kubectl apply -f -
          kubectl rollout status deployment ${BACKEND_IMAGE}-dep
          kubectl get services -o wide
